#Ordenar continentes pela mediana de forma decrescente
arrange(vaccine, desc(mean)) %>%
ungroup()
#Visualizar
continentes_vac
latin_2000_2023 = cobertura_vacinal %>%
#Missing values: Aqui, é importante retirá-los para não repetir linhas
drop_na(coverage) %>%
#Filtrando os dados no intervalo e
filter(between(year, 2000, 2022),
str_detect(region_complete, "Latin"),
type == "country") %>%
#Agrupar por vacina e país
group_by(vaccine, name) %>%
#Resumir estatísticas
# Estatísticas da cobertura vacinal para cada país em um continente
# Média, mediana, mínimo e máximo de uma variável numérica
summarise(
mean = mean(coverage),
median = median(coverage),
max = max(coverage),
min = min(coverage),
sd = sd(coverage),
var = var(coverage)
) %>%
#Ordenar continentes pela mediana de forma decrescente
arrange(vaccine, desc(mean)) %>%
#Desagrupar
ungroup()
latin_2000_2023
# Mortes cumulativas
# Estatísticas de cada continente
continentes_mortes = mortes_doencas %>%
drop_na(total_deaths,
continent) %>%
filter(between(year, 2000, 2023)) %>%
group_by(death_disease, continent) %>%
summarise(
cumulativo = sum(total_deaths),
mean = mean(total_deaths),
median = median(total_deaths),
max = max(total_deaths),
min = min(total_deaths),
sd = sd(total_deaths),
var = var(total_deaths)
) %>%
#Aqui, queremos os países com maior número de mortes
arrange(death_disease, - cumulativo) %>%
ungroup()
continentes_mortes
continentes_mortes
# Mortes cumulativas
# Estatísticas de cada continente
paises_mortes = mortes_doencas %>%
drop_na(total_deaths,
name) %>%
filter(between(year, 2000, 2023)) %>%
group_by(death_disease, name) %>%
summarise(
cumulativo = sum(total_deaths),
mean = mean(total_deaths),
median = median(total_deaths),
max = max(total_deaths),
min = min(total_deaths),
sd = sd(total_deaths),
var = var(total_deaths)
) %>%
arrange(death_disease, desc(cumulativo)) %>%
ungroup()
paises_mortes
# Mortes cumulativas
# Estatísticas de cada continente
paises_mortes = mortes_doencas %>%
drop_na(total_deaths,
name) %>%
filter(between(year, 2000, 2023)) %>%
group_by(death_disease, name) %>%
summarise(
cumulativo = sum(total_deaths),
mean = mean(total_deaths),
median = median(total_deaths),
max = max(total_deaths),
min = min(total_deaths),
sd = sd(total_deaths),
var = var(total_deaths)
) %>%
arrange(death_disease, desc(cumulativo)) %>%
ungroup()
paises_mortes
#Gráfico de pontos simples
continentes_pontos_vac = continentes_vac %>% #Dataframe
filter(vaccine %in% "MCV1") %>%
mutate(continent = fct_reorder(continent, median)) %>%
#Chamando a função. Aqui se usa "+" em vez de "%>%"
ggplot() +
#Mapeando os eixos
aes(x = median,
y = continent,
color = continent) +
#Geometrias
geom_point() +
geom_label(aes(x = median,
y = continent,
label = median)) +
#Tema
theme_light() +
#Labels
labs(title = "Cobertura vacinal",
x = "Mediana (Cobertura vacinal %)",
y = "Continentes")
continentes_pontos_vac
#Criando a lista
lista = list(a, b, f, h, j, multiplicacão, t, data, matrix, tibble)
#Criando a lista
lista = list(a, b, f, h, j, multiplicacão, t, data, matrix, tibble)
#Operações básicas -----
#Variáveis numéricas
x = 5
x
y = 7
y
z = y + x
z
multiplicacão = x * y
multiplicacão
# Variáveis textuais (characters, string)
a = "Olá" #Uma palavra
a
b = "Tudo bem?" #Uma frase
b
# Variáveis Lógicas
t = TRUE
t
f = FALSE
f
# Comparações lógicas (booleanas)
a == b #Diferente
x < y # Menor
x > y # Maior
x <= 5 # menor ou igual
t == f #Igual
t != f #Diferente
tt = TRUE
ff = FALSE
aa = "Olá"
t == tt
f == ff
aa == a
# Vetores
i = c(7, 5, 9, 10) #Numérico
i
j = c("Olá", "Caneta", "Qualificacao") #String
j
h = c(7, "olá", 78) #String
h
# O que esta função faz? Use o "?" antes da função e rode.
?c()
#Dataframes e tibbles -----
#Dataframe
data = data.frame(
nome = c("Gabriela", "Júlia", "Beatriz", "Luiza"),
altura = c(1.59, 1.60, 1.78, 1.73),
idade = c(30, 25, 31, 32)
)
data
#Tibble
tibble = tribble(
~nome, ~altura, ~idade,
"Gabriela", 1.59,   30,
"Júlia",   1.60,   25,
"Beatriz", 1.65,  31,
"Luiza",   1.73,   32
)
tibble
# Vetores em dataframe
as.data.frame(i) #dataframe com coluna numérica
as.data.frame(j) #dataframe com coluna textual
as.data.frame(h) #dataframe com coluna textual, mesmo com valores numéricos
#Visualizando o dataframe -----
# Com print()
print(data) #No documento ou console
print(tibble)
# Com nome do objeto
data
tibble
# Com glimpse(). #Descrição mais completa da tabela
glimpse(data)
glimpse(tibble)
# Com view(). A tabela completa com mais funcionalidades (filtragem manual, pesquisa e ordenamento) abrirá em uma nova janela
view(data)
view(tibble)
# Selecionando o nome do objeto e segurando Ctrl + Click.
data
tibble
# Estatísticas gerais
summary(tibble)
summary(data)
# Usando skim
skim(tibble)
skim(data)
# Trabalhando com dataframes -----
#Transformando outros formatos em dataframe
# Long table
data_long = pivot_longer(data, #Tabela
cols = c(altura, idade), #Colunas para alongar
values_to = "valor", # Estocar valores em uma nova coluna
names_to = "variavel" # Estocar variáveis em uma nova coluna
)
data
data_long
# Wide table
data_wide = pivot_wider(data_long, #Tabela
names_from = variavel, #Dividir níveis de uma coluna em novas colunas
values_from = valor)   #Estocar valores relacionados à coluna nome e novas variáveis)
data_wide
#Matriz
matrix = as.matrix(data) #Transformar tabela em matriz
matrix #Os valores numéricos são strings
data_matrix = column_to_rownames(data, "nome") #Converte coluna em rownames
matrix = as.matrix(data_matrix)
matrix #Agora, os valores são numéricos
# Reconverter para dataframe
matrix_dr = as.data.frame(matrix)
matrix_dr # Coluna "nome" continua como rownames e dificulta a manipulação.
matrix_dr = rownames_to_column(matrix_dr, "nome") #Converter rownames em nova coluna
matrix_dr
#Criando a lista
lista = list(a, b, f, h, j, multiplicacão, t, data, matrix, tibble)
View(lista) #Visualizando a lista
#Acessando objetos diferentes da lista
lista[[1]] #Primeiro objeto
lista[[8]] #Oitavo objeto
#Isolando o objeto
df_list = lista[[10]]
df_list
lista
multiplicacão
data
matrix
tibble
multiplicacão
j
h
f
b
a, b, f, h, j, multiplicacão, t, data, matrix, tibble
a
lista
#Acessando objetos diferentes da lista
lista[[1]] #Primeiro objeto
lista[[8]] #Oitavo objeto
#Isolando o objeto
df_list = lista[[10]]
df_list
#Boxplot por vacina
cobertura_vacinal %>%
filter(type == "country",
year == 2015) %>%
ggplot() +
aes(x = "", y = coverage, fill = continent) +
geom_boxplot() +
scale_fill_viridis_d(option = "plasma", direction = 1) +
theme_minimal() +
facet_wrap(vars(vaccine)) +
labs(x = "Regiões",
y = "Cobertura",
titulo = "Cobertura vacinal por região, em 2000") +
scale_fill_lancet()
gapminder %>%
filter(year %in% c(1952, 1982, 2002)) %>%
ggplot() +
aes(
x = gdpPercap,
y = lifeExp,
colour = continent,
size = pop,
group = country
) +
geom_point(shape = "circle") +
scale_x_continuous(trans = "log10") +
theme_minimal() +
facet_wrap(vars(year), scales = "free_x") +
gghighlight(country == "China") +
scale_color_npg()
library(gapminder)
gapminder %>%
filter(year %in% c(1952, 1982, 2002)) %>%
ggplot() +
aes(
x = gdpPercap,
y = lifeExp,
colour = continent,
size = pop,
group = country
) +
geom_point(shape = "circle") +
scale_x_continuous(trans = "log10") +
theme_minimal() +
facet_wrap(vars(year), scales = "free_x") +
gghighlight(country == "China") +
scale_color_npg()
install.packages("gapminder")
install.packages("gapminder")
gapminder %>%
filter(year %in% c(1952, 1982, 2002)) %>%
ggplot() +
aes(
x = gdpPercap,
y = lifeExp,
colour = continent,
size = pop,
group = country
) +
geom_point(shape = "circle") +
scale_x_continuous(trans = "log10") +
theme_minimal() +
facet_wrap(vars(year), scales = "free_x") +
gghighlight(country == "China") +
scale_color_npg()
aa = "Olá"
aa == a
#Criando a lista
lista = list(a, b, h, j, multiplicacão, data, matrix, tibble)
#Acessando objetos diferentes da lista
lista[[1]] #Primeiro objeto
lista[[8]] #Oitavo objeto
#Isolando o objeto
df_list = lista[[10]]
#Isolando o objeto
df_list = lista[[8]]
df_list
#Acessando objetos diferentes da lista
lista[[1]] #Primeiro objeto
lista[[8]] #Oitavo objeto
#Acessando objetos diferentes da lista
lista[[1]] #Primeiro objeto
h = c(7, "10", 78)
h
data_2
#Níveis de colunas
unique(cobertura_vacinal$region_complete)
```{r}
#Tabela de frequências
table(cobertura_vacinal$name)  %>%
head(10)
cobertura_vacinal %>%
count(vaccine) %>%
head(10)
cobertura_vacinal %>%
count(region_complete) %>%
head(10)
#Tabela de frequências
tabyl(cobertura_vacinal, name) %>%
head(10)
#Tabela de frequências
tabyl(region_complete, name) %>%
head(10)
#Tabela de frequências
tabyl(cobertura_vacinal, region_complete) %>%
head(10)
#Tabela de frequências
cobertura_vacinal %>%
tabyl(region_complete) %>%
head(10)
# Dados faltantes ----
skim(cobertura_vacinal) # Por que são faltantes? Precisamos deles?
# Como são essas linhas?
cobertura_vacinal %>%
filter(!complete.cases(.)) %>%
head(10)
#Gráfico de barras simples
continente_barras_vac = continentes_vac %>% #Dataframe
filter(vaccine %in% "MCV1") %>%
mutate(continent = fct_reorder(continent, median)) %>%
ggplot() + #Chamando a função. Aqui se usa "+" em vez de "%>%"
#Mapeando os eixos
aes(x = median,
y = continent,
fill = continent) +
#Geometrias
geom_col() +
geom_text(aes(x = median,
y = continent,
label = median),
hjust = -0.5) +
#Tema
theme_light() +
#Labels
labs(title = "Cobertura vacinal",
x = "Mediana (Cobertura vacinal %)",
y = "Continentes")
continente_barras_vac
#Gráfico de barras simples
continente_barras_vac = continentes_vac %>% #Dataframe
filter(vaccine %in% "MCV1") %>%
mutate(continent = fct_reorder(continent, median)) %>%
ggplot() + #Chamando a função. Aqui se usa "+" em vez de "%>%"
#Mapeando os eixos
aes(x = median,
y = continent,
fill = continent) +
#Geometrias
geom_col() +
geom_text(aes(x = median,
y = continent,
label = median),
hjust = -0.5) +
#Tema
theme_light() +
#Labels
labs(title = "Cobertura vacinal",
x = "Mediana (Cobertura vacinal %)",
y = "Continentes")  +
#Limites
xlim(0, 105)
continente_barras_vac
#Unir gráficos
(vaccination / deaths)
(vaccination + deaths)
# Unir gráficos
br_cov + br_mortes
# Como são essas linhas?
cobertura_vacinal %>%
filter(!complete.cases(.)) %>%
tail(10)
# Como são essas linhas?
cobertura_vacinal %>%
filter(!complete.cases(.)) %>%
head(10)
# Dados faltantes ----
skim(cobertura_vacinal)
#Tabela de frequências
cobertura_vacinal %>%
tabyl(continent) %>%
head(10)
unique(cobertura_vacinal$continent)
#Níveis de colunas
unique(cobertura_vacinal$region_complete)
unique(cobertura_vacinal$region)
unique(cobertura_vacinal$region_complete)
unique(cobertura_vacinal$continent)
8488 / (8488+930+269+265+118+4)
8100 / (8488+930+269+265+118+4)
#Gráfico de barras simples
paises_barras_mortes = paises_mortes %>% #Dataframe
filter(death_disease == "Measles",
continent == "Asia") %>%
mutate(name = fct_reorder(name, cumulativo)) %>%
slice_max(order_by = cumulativo, n = 10) %>%
ggplot() + #Chamando a função. Aqui se usa "+" em vez de "%>%"
#Mapeando os eixos
aes(x = cumulativo,
y = name,
fill = name) +
#Geometrias
geom_col() +
geom_label(aes(x = cumulativo,
y = name,
label = cumulativo),
hjust = -0.2) +
#Tema
theme_light() +
#Labels
labs(title = "Mortes cumulativas por Sarampo, de 2000 a 2023",
x = "Mortes",
y = "Países") +
#Eixo x
xlim(0, 10000) #Aumentar limites
# Mortes cumulativas
# Estatísticas de cada país
paises_mortes = mortes_doencas %>%
drop_na(total_deaths,
name) %>%
filter(between(year, 2000, 2023)) %>%
group_by(death_disease, name) %>%
summarise(
cumulativo = sum(total_deaths),
mean = mean(total_deaths),
median = median(total_deaths),
max = max(total_deaths),
min = min(total_deaths),
sd = sd(total_deaths),
var = var(total_deaths)
) %>%
arrange(death_disease, desc(cumulativo)) %>%
ungroup()
paises_mortes
#Gráfico de barras simples
paises_barras_mortes = paises_mortes %>% #Dataframe
filter(death_disease == "Measles") %>%
mutate(name = fct_reorder(name, cumulativo)) %>%
slice_max(order_by = cumulativo, n = 10) %>%
ggplot() + #Chamando a função. Aqui se usa "+" em vez de "%>%"
#Mapeando os eixos
aes(x = cumulativo,
y = name,
fill = name) +
#Geometrias
geom_col() +
geom_label(aes(x = cumulativo,
y = name,
label = cumulativo),
hjust = -0.2) +
#Tema
theme_light() +
#Labels
labs(title = "Mortes cumulativas por Sarampo, de 2000 a 2023",
x = "Mortes",
y = "Países") +
#Eixo x
xlim(0, 10000) #Aumentar limites
paises_barras_mortes
