---
title: "Curso"
output: html_document
date: "`r Sys.Date()`"
---

# Biblioteca e pacotes

```{r}
# Baixar pacotes do CRAN para a biblioteca
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")

# Chamando os pacotes da biblioteca
library(tidyverse)
library(skimr)
library(janitor)

```


# Conhecendo o R
## Operações básicas
```{r}
#Operações básicas -----

#Variáveis numéricas
x = 5
y = 7
z = y + x
multi = x * y
multi

# Variáveis textuais (caracteres, string)

a = "Olá"
b = "Tudo bem?"

# Variáveis Lógicas
t = TRUE
f = FALSE
tt = TRUE
ff = FALSE
aa = "Olá"

# Comparações lógicas (booleanas)
t == f #Igual
t != f #Diferente
aa == a #Igual
a == b #Diferente

x < y # Menor
x > y # Maior
x <= 5 # menor ou igual
```

## Vetores
```{r}
# Vetores
i = c(7, 5, 9, 10) #Numérico
i

j = c("Olá", "Caneta", "Qualificacao") #String
j

h = c(7, "olá", 78) #String
h
```

## Dataframes e tibbles
```{r}
#Dataframes e tibbles -----

#Dataframe
data = data.frame(
  nome = c("Gabriela", "Júlia", "Beatriz", "Luiza"),
  altura = c(1.59, 1.60, 1.65, 1.73),
  idade = c(30, 25, 31, 32)
)

#Tibble
tibble = tribble(
  ~nome, ~altura, ~idade,
  "Gabriela", 1.59,   30,
  "Júlia",   1.60,   25,
  "Beatriz",    1.65,  31,
  "Luiza",  1.73,   32 
  )

#VisuaBeatrizando o dataframe -----
# A diferença de cada objeto está na visuaBeatrização no console.
# Com print()
print(data) #No documento ou console
print(tibble)

# Com nome do objeto
data
tibble 

# Com glimpse(). #Descrição mais completa da tabela
glimpse(data) 
glimpse(tibble)

# Com view(). A tabela abrirá em uma nova janela
view(data) 
view(tibble)
```

Estatísticas gerais da tabela
```{r}
# Estatísticas gerais 
summary(tibble)
summary(data)

# Usando skim
skim(tibble)
skim(data)

# Vetores em dataframe
as.data.frame(i) #dataframe com coluna numérica
as.data.frame(j) #dataframe com coluna textual
as.data.frame(h) #dataframe com coluna textual, mesmo com valores numéricos
```

Convertendo de wide para long
```{r}
# Trabalhando com dataframes -----
#Transformando outros formatos em dataframe

# Long table
data_long = pivot_longer(data, #Tabela 
             cols = c(altura, idade), #Colunas para alongar 
             values_to = "valor", # Estocar valores em uma nova coluna
             names_to = "variavel" # Estocar variáveis em uma nova coluna
             ) 
data_long

# Wide table
data_wide = pivot_wider(data_long, #Tabela
            names_from = variavel, #Dividir níveis de uma coluna em novas colunas
            values_from = valor)   #Estocar valores relacionados à coluna nome e novas variáveis) 

```

## Matrizes

```{r}
#Matriz
matrix = as.matrix(data) #Transformar tabela em matriz
matrix #Os valores numéricos são strings

data_matrix = column_to_rownames(data, "nome") #Converte coluna em rownames
matrix = as.matrix(data_matrix)
matrix #Agora, os valores são numéricos

# Reconverter para dataframe
matrix_dr = as.data.frame(matrix)
matrix_dr # Coluna "nome" continua como rownames e dificulta a manipulação.

matrix_dr = rownames_to_column(matrix_dr, "nome") #Converter rownames em nova coluna
matrix_dr

```



## Manipulação de tabelas com o R base
```{r}
# Acessando colunas do data frame
data$nome
data$idade

# Criando nova variável para não sobrescrever a tabela original para os próximos exemplos
data_2 = data

# Adicionando uma nova coluna ao data frame
data_2$peso = c(70, 
                65, 
                80, 
                20)
data_2

# Removendo uma coluna do data frame
data_2 = data_2[ , -4]

# Filtrando linhas do data frame. df[linha, coluna]
data_jovens = data_2[data_2$idade < 30, ]
data_jovens

# Ordenando o data frame por uma coluna
data_ordenados <- data_2[order(data_2$idade), ]
data_ordenados
```

# Manipulação com o tidyverse


## Adicionando linhas e colunas
```{r}
#Adicionar linha
data_2 = add_row(data, 
               nome = "Rafaela", 
               idade = 50,
               altura = 1.85)

tibble_2 = add_row(tibble, 
                   nome = "Rafaela", 
                   idade = 50,
                   altura = 1.85)

#Adicionar coluna
data_2 = add_column(data,
                    peso = c(50,
                             80,
                             40,
                             100))

tibble_2 = add_column(tibble_2,
                      peso = c(50,
                               80,
                               40,
                               100))
```

## Filtrando linhas e usando o pipe
```{r}
# Filtrando linhas ----
idade = filter(data, idade >= 30)
idade_nome = filter(idade, nome == "Júlia")

# Usando o pipe "%>%" (lê-se "e então")
data %>%                   # Tenho este objeto 
  filter(idade >= 30) %>%  # E então vou filtrar os indivíduos com menos de 30 anos
  filter(nome != "Júlia")   # E então vou filtrar os indivíduos que não incluam a "Júlia"

# Filtrando mais de um valor usando | (OU) e "%in% c()"

data %>%                   #Tenho este objeto
  filter(nome == "Júlia" | # E então vou filtrar indivíduos que tenham o nome "Júlia" OU 
           nome == "Gabriela") #"Gabriela"

data %>%  
  filter(nome %in% c(     # Filtrando os valores "Júlia" OU "Gabriela" dentro (%in%) da coluna "nome" 
    "Júlia", 
    "Gabriela")) 

```

## select(): Selecionando colunas
```{r}
# Selecionando colunas ----
# Selecionar colunas específicas
data_2 %>%
  select(nome, altura) 

# Selecionar da coluna nome (1) à coluna peso (3)
data_2 %>% 
  select(nome:peso) 

data_2 %>% 
  select(-idade) #Retirando coluna

data_2 %>%   
  select(!idade) #Retirando coluna

```

## mutate(): Criando e realizando operações com novas variáveis
```{r}
# Criando novas variáveis
data_2 %>% 
  mutate(imc = peso / (altura^2))

```

## summarize(): resumindo estatísticas
```{r}
# Resumindo dados
data %>% 
  summarize(Media_idade = mean(idade))
```

## Ordenando dados
```{r}
# Ordenando dados
data %>% 
  arrange(idade)
data %>% 
  arrange(desc(idade))
data %>% 
  arrange(-idade)
```

## Fazendo múltiplas operações de uma vez
```{r}
# Múltiplas operações em uma caixa
data %>% 
  arrange(altura) %>% 
  filter(idade >= 30,
         peso >= 50) %>% 
  select(-nome) %>% 
  mutate(imc = round(imc, 1),
         peso_x_idade = peso * idade) %>%
  summarise(mean_peso = mean(peso),
            mean_imc = mean(imc))
```


# Trabalhando com dados reais

## Importando e padronizando tabela
```{r}
#Importando a tabela ----

tabelageralunicef %>% 
  mutate(unicef_region = if_else(is.na(unicef_region), region, unicef_region),
         cov = if_else(is.na(cov), coverage, cov),
         country = if_else(is.na(country), region, country)) %>% 
  select(!c(region, coverage))
  #write.csv("cobertura_vacinal_unicef.csv", row.names = F)


#Pelo readr
cobertura_vacinal_unicef <- read_csv("cobertura_vacinal_unicef.csv") 
#Manual: File > Import Dataset > From text (readr)
cobertura_vacinal_unicef

data_long = cobertura_vacinal_unicef 

```

## Explorando dados
```{r}
# Explorando dados -----

# Tabela completa
view(data_long) 

# Descrição geral
glimpse(data_long)

# Primeiras 10 linhas
head(data_long, 10)

# Últimas 10 linhas
tail(data_long, 10)

#Summary statistics
summary(data_long)

#Níveis de colunas
unique(data_long$unicef_region)
unique(data_long$country)
unique(data_long$vaccine)

#Contar linhas por coluna
data_long %>% count(country) 
data_long %>% count(vaccine) 
data_long %>% count(unicef_region) 

table(data_long$country)
janitor::tabyl(data_long,country)

# Dados faltantes
skim(data_long) # Por que são faltantes? Precisamos deles?
```


```{r}
# Padronizando a tabela ----

data_long %>% 
  select(name = country, 
         country_abrev = iso3, 
         year, 
         vaccine, 
         coverage = cov, 
         region = unicef_region) %>% 
  
  mutate(
         # Anotando dados
         type = if_else(name == region, # Se o nome for igual à região,
                        "region",       # então ele é uma região,
                        "country"),     # caso contrário, é um país.
         
         # Vacinas por doenças
         diseases = case_when(vaccine == "BCG" ~ "Tuberculosis",
                              vaccine == "DTP1" ~ "Difteria, Tetanus, Pertussis",
                              vaccine == "DT3" ~ "Difteria, Tetanus, Pertussis",
                              vaccine == "HEPB3" ~ "Hepatitis B",
                              vaccine == "HEPBB" ~ "Hepatitis B",
                              vaccine == "HIB3" ~ "Haemophilus influenzae B",
                              vaccine == "IPV1" ~ "Poliomielitis",
                              vaccine == "MCV1" ~ "Measles",
                              vaccine == "MCV2" ~ "Measles",
                              vaccine == "PCV3" ~ "Pneumococcus",
                              vaccine == "POL3" ~ "Poliomielitis",
                              vaccine == "RCV1" ~ "Rotavirus",
                              vaccine == "ROTAC" ~ "Rotavirus",
                              vaccine == "YFV" ~ "Yellow fever",
                              TRUE ~ region
                              ),
         
         # Abreviação para nome completo
         region_complete = case_when(region == "EAPR" ~ "East Asia and Pacific", 
                              region == "ECAR" ~ "Europe and Central Asia",
                              region == "MENA" ~ "Middle East and North Africa",
                              region == "ESAR" ~ "Eastern and Southern Africa",
                              region == "LACR" ~ "Latin America and Caribbean",
                              region == "Non-programme" ~ "Non-programme",
                              region == "ROSA" ~ "South Asia",
                              region == "WCAR" ~ "West and Central Africa",
                              TRUE ~ region
  ))



#Tabela larga
data_wide = data_long %>% 
   pivot_wider(., names_from = year, values_from = cov)
```


```{r}
# Média, mediana, mínimo e máximo de uma variável numérica
data_long %>% 
  select(cobertura, uf, ano, imuno) %>% 
  filter(uf %in% c("São Paulo", "Pernambuco"),
         imuno != "Ignorado",
         cobertura > 0) %>% 
  group_by(uf, imuno) %>% 
  summarise(
    mean = mean(cobertura),
    median = median(cobertura),
    max = max(cobertura),
    min = min(cobertura)
  )


sp_pe = data_long %>% 
  select(cobertura, uf, ano, imuno) %>% 
  filter(uf %in% c("São Paulo", "Pernambuco"),
         imuno != "Ignorado",
         cobertura > 0)

library(esquisse)

# esquisser(sp_pe)

ggplot(sp_pe) +
 aes(x = ano, y = cobertura, colour = uf) +
 geom_line() +
 scale_color_hue(direction = 1) +
 theme_minimal() +
 facet_wrap(vars(imuno))



```


```{r}
mediana <- median(tabela_longa$variavel_numerica)
minimo <- min(tabela_longa$variavel_numerica)
maximo <- max(tabela_longa$variavel_numerica)

# Desvio padrão e variância
desvio_padrao <- sd(tabela_longa$variavel_numerica)
variancia <- var(tabela_longa$variavel_numerica)

# data_long %>% 
#   tabyl(ano) %>% 
#   adorn_totals("row") %>%
#   adorn_pct_formatting() %>% 
#   ggplot(aes(x = ano, y = n)) +
#   geom_bar(stat = "identity") +
#   coord_flip()

```



```{r}

install.packages("esquisse")
install.packages("htmltools")

library(esquisse)
library(tidyverse)

esquisser(dados)

dados = sipni_cobertura_uf_1994_2023

dados %>%
 filter(nome %in% "SAO PAULO") %>%
 ggplot() +
  aes(x = ano, y = cobertura, colour = nome) +
  geom_line() +
  scale_color_hue(direction = 1) +
  theme_minimal() +
  facet_wrap(vars(imuno))
```

